{"ast":null,"code":"var _jsxFileName = \"/Users/sherimcdowell/Desktop/VScode Projects/APP-Creations/BGP_Members_Management/BGP_Members_Management/frontend/src/contexts/AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useReducer, useEffect } from 'react';\nimport { authAPI } from '../services/api';\nimport toast from 'react-hot-toast';\n\n// Auth reducer\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst authReducer = (state, action) => {\n  switch (action.type) {\n    case 'SET_LOADING':\n      return {\n        ...state,\n        loading: action.payload\n      };\n    case 'LOGIN_SUCCESS':\n      return {\n        ...state,\n        user: action.payload.user,\n        token: action.payload.token,\n        loading: false\n      };\n    case 'LOGOUT':\n      return {\n        ...state,\n        user: null,\n        token: null,\n        loading: false\n      };\n    case 'UPDATE_USER':\n      return {\n        ...state,\n        user: {\n          ...state.user,\n          ...action.payload\n        }\n      };\n    default:\n      return state;\n  }\n};\n\n// Initial state\nconst initialState = {\n  user: null,\n  token: localStorage.getItem('bgp_token'),\n  loading: true\n};\n\n// Create context\nconst AuthContext = /*#__PURE__*/createContext();\n\n// Auth provider component\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [state, dispatch] = useReducer(authReducer, initialState);\n\n  // Check if user is logged in on app start\n  useEffect(() => {\n    const token = localStorage.getItem('bgp_token');\n    const userData = localStorage.getItem('bgp_user');\n    if (token && userData) {\n      try {\n        const user = JSON.parse(userData);\n        dispatch({\n          type: 'LOGIN_SUCCESS',\n          payload: {\n            user,\n            token\n          }\n        });\n      } catch (error) {\n        console.error('Error parsing stored user data:', error);\n        localStorage.removeItem('bgp_token');\n        localStorage.removeItem('bgp_user');\n        dispatch({\n          type: 'SET_LOADING',\n          payload: false\n        });\n      }\n    } else {\n      dispatch({\n        type: 'SET_LOADING',\n        payload: false\n      });\n    }\n  }, []);\n\n  // Login function\n  const login = async credentials => {\n    try {\n      dispatch({\n        type: 'SET_LOADING',\n        payload: true\n      });\n      const response = await authAPI.login(credentials);\n      if (response.success) {\n        const {\n          user,\n          token\n        } = response;\n\n        // Store in localStorage\n        localStorage.setItem('bgp_token', token);\n        localStorage.setItem('bgp_user', JSON.stringify(user));\n        dispatch({\n          type: 'LOGIN_SUCCESS',\n          payload: {\n            user,\n            token\n          }\n        });\n        toast.success(`Welcome back, ${user.full_name || user.username}!`);\n        return {\n          success: true\n        };\n      } else {\n        throw new Error(response.message || 'Login failed');\n      }\n    } catch (error) {\n      var _error$response, _error$response$data;\n      console.error('Login error:', error);\n      dispatch({\n        type: 'SET_LOADING',\n        payload: false\n      });\n      const message = ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || error.message || 'Login failed';\n      toast.error(message);\n      return {\n        success: false,\n        error: message\n      };\n    }\n  };\n\n  // Logout function\n  const logout = async () => {\n    try {\n      // Call logout API endpoint\n      if (state.token) {\n        await authAPI.logout();\n      }\n    } catch (error) {\n      console.error('Logout API error:', error);\n    } finally {\n      // Clear local storage and state regardless of API response\n      localStorage.removeItem('bgp_token');\n      localStorage.removeItem('bgp_user');\n      dispatch({\n        type: 'LOGOUT'\n      });\n      toast.success('Logged out successfully');\n    }\n  };\n\n  // Change password function\n  const changePassword = async passwords => {\n    try {\n      const response = await authAPI.changePassword(passwords);\n      if (response.success) {\n        toast.success('Password changed successfully');\n        return {\n          success: true\n        };\n      } else {\n        throw new Error(response.message || 'Password change failed');\n      }\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      console.error('Change password error:', error);\n      const message = ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || error.message || 'Password change failed';\n      toast.error(message);\n      return {\n        success: false,\n        error: message\n      };\n    }\n  };\n\n  // Update user data\n  const updateUser = userData => {\n    dispatch({\n      type: 'UPDATE_USER',\n      payload: userData\n    });\n\n    // Update localStorage\n    const updatedUser = {\n      ...state.user,\n      ...userData\n    };\n    localStorage.setItem('bgp_user', JSON.stringify(updatedUser));\n  };\n\n  // Check if user has specific role\n  const hasRole = role => {\n    var _state$user;\n    return ((_state$user = state.user) === null || _state$user === void 0 ? void 0 : _state$user.role) === role;\n  };\n\n  // Check if user has any of the specified roles\n  const hasAnyRole = roles => {\n    var _state$user2;\n    return roles.includes((_state$user2 = state.user) === null || _state$user2 === void 0 ? void 0 : _state$user2.role);\n  };\n  const value = {\n    ...state,\n    login,\n    logout,\n    changePassword,\n    updateUser,\n    hasRole,\n    hasAnyRole\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 179,\n    columnNumber: 5\n  }, this);\n};\n\n// Custom hook to use auth context\n_s(AuthProvider, \"bgCdjuTOmPdSBRwTap80EFd9Y3U=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","useEffect","authAPI","toast","jsxDEV","_jsxDEV","authReducer","state","action","type","loading","payload","user","token","initialState","localStorage","getItem","AuthContext","AuthProvider","children","_s","dispatch","userData","JSON","parse","error","console","removeItem","login","credentials","response","success","setItem","stringify","full_name","username","Error","message","_error$response","_error$response$data","data","logout","changePassword","passwords","_error$response2","_error$response2$data","updateUser","updatedUser","hasRole","role","_state$user","hasAnyRole","roles","_state$user2","includes","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","$RefreshReg$"],"sources":["/Users/sherimcdowell/Desktop/VScode Projects/APP-Creations/BGP_Members_Management/BGP_Members_Management/frontend/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useReducer, useEffect } from 'react';\nimport { authAPI } from '../services/api';\nimport toast from 'react-hot-toast';\n\n// Auth reducer\nconst authReducer = (state, action) => {\n  switch (action.type) {\n    case 'SET_LOADING':\n      return { ...state, loading: action.payload };\n    case 'LOGIN_SUCCESS':\n      return {\n        ...state,\n        user: action.payload.user,\n        token: action.payload.token,\n        loading: false\n      };\n    case 'LOGOUT':\n      return {\n        ...state,\n        user: null,\n        token: null,\n        loading: false\n      };\n    case 'UPDATE_USER':\n      return {\n        ...state,\n        user: { ...state.user, ...action.payload }\n      };\n    default:\n      return state;\n  }\n};\n\n// Initial state\nconst initialState = {\n  user: null,\n  token: localStorage.getItem('bgp_token'),\n  loading: true\n};\n\n// Create context\nconst AuthContext = createContext();\n\n// Auth provider component\nexport const AuthProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(authReducer, initialState);\n\n  // Check if user is logged in on app start\n  useEffect(() => {\n    const token = localStorage.getItem('bgp_token');\n    const userData = localStorage.getItem('bgp_user');\n    \n    if (token && userData) {\n      try {\n        const user = JSON.parse(userData);\n        dispatch({\n          type: 'LOGIN_SUCCESS',\n          payload: { user, token }\n        });\n      } catch (error) {\n        console.error('Error parsing stored user data:', error);\n        localStorage.removeItem('bgp_token');\n        localStorage.removeItem('bgp_user');\n        dispatch({ type: 'SET_LOADING', payload: false });\n      }\n    } else {\n      dispatch({ type: 'SET_LOADING', payload: false });\n    }\n  }, []);\n\n  // Login function\n  const login = async (credentials) => {\n    try {\n      dispatch({ type: 'SET_LOADING', payload: true });\n      \n      const response = await authAPI.login(credentials);\n      \n      if (response.success) {\n        const { user, token } = response;\n        \n        // Store in localStorage\n        localStorage.setItem('bgp_token', token);\n        localStorage.setItem('bgp_user', JSON.stringify(user));\n        \n        dispatch({\n          type: 'LOGIN_SUCCESS',\n          payload: { user, token }\n        });\n        \n        toast.success(`Welcome back, ${user.full_name || user.username}!`);\n        return { success: true };\n      } else {\n        throw new Error(response.message || 'Login failed');\n      }\n    } catch (error) {\n      console.error('Login error:', error);\n      dispatch({ type: 'SET_LOADING', payload: false });\n      \n      const message = error.response?.data?.message || error.message || 'Login failed';\n      toast.error(message);\n      \n      return { success: false, error: message };\n    }\n  };\n\n  // Logout function\n  const logout = async () => {\n    try {\n      // Call logout API endpoint\n      if (state.token) {\n        await authAPI.logout();\n      }\n    } catch (error) {\n      console.error('Logout API error:', error);\n    } finally {\n      // Clear local storage and state regardless of API response\n      localStorage.removeItem('bgp_token');\n      localStorage.removeItem('bgp_user');\n      \n      dispatch({ type: 'LOGOUT' });\n      toast.success('Logged out successfully');\n    }\n  };\n\n  // Change password function\n  const changePassword = async (passwords) => {\n    try {\n      const response = await authAPI.changePassword(passwords);\n      \n      if (response.success) {\n        toast.success('Password changed successfully');\n        return { success: true };\n      } else {\n        throw new Error(response.message || 'Password change failed');\n      }\n    } catch (error) {\n      console.error('Change password error:', error);\n      \n      const message = error.response?.data?.message || error.message || 'Password change failed';\n      toast.error(message);\n      \n      return { success: false, error: message };\n    }\n  };\n\n  // Update user data\n  const updateUser = (userData) => {\n    dispatch({\n      type: 'UPDATE_USER',\n      payload: userData\n    });\n    \n    // Update localStorage\n    const updatedUser = { ...state.user, ...userData };\n    localStorage.setItem('bgp_user', JSON.stringify(updatedUser));\n  };\n\n  // Check if user has specific role\n  const hasRole = (role) => {\n    return state.user?.role === role;\n  };\n\n  // Check if user has any of the specified roles\n  const hasAnyRole = (roles) => {\n    return roles.includes(state.user?.role);\n  };\n\n  const value = {\n    ...state,\n    login,\n    logout,\n    changePassword,\n    updateUser,\n    hasRole,\n    hasAnyRole\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\n// Custom hook to use auth context\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  \n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  \n  return context;\n};"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,UAAU,EAAEC,SAAS,QAAQ,OAAO;AAC/E,SAASC,OAAO,QAAQ,iBAAiB;AACzC,OAAOC,KAAK,MAAM,iBAAiB;;AAEnC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,WAAW,GAAGA,CAACC,KAAK,EAAEC,MAAM,KAAK;EACrC,QAAQA,MAAM,CAACC,IAAI;IACjB,KAAK,aAAa;MAChB,OAAO;QAAE,GAAGF,KAAK;QAAEG,OAAO,EAAEF,MAAM,CAACG;MAAQ,CAAC;IAC9C,KAAK,eAAe;MAClB,OAAO;QACL,GAAGJ,KAAK;QACRK,IAAI,EAAEJ,MAAM,CAACG,OAAO,CAACC,IAAI;QACzBC,KAAK,EAAEL,MAAM,CAACG,OAAO,CAACE,KAAK;QAC3BH,OAAO,EAAE;MACX,CAAC;IACH,KAAK,QAAQ;MACX,OAAO;QACL,GAAGH,KAAK;QACRK,IAAI,EAAE,IAAI;QACVC,KAAK,EAAE,IAAI;QACXH,OAAO,EAAE;MACX,CAAC;IACH,KAAK,aAAa;MAChB,OAAO;QACL,GAAGH,KAAK;QACRK,IAAI,EAAE;UAAE,GAAGL,KAAK,CAACK,IAAI;UAAE,GAAGJ,MAAM,CAACG;QAAQ;MAC3C,CAAC;IACH;MACE,OAAOJ,KAAK;EAChB;AACF,CAAC;;AAED;AACA,MAAMO,YAAY,GAAG;EACnBF,IAAI,EAAE,IAAI;EACVC,KAAK,EAAEE,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;EACxCN,OAAO,EAAE;AACX,CAAC;;AAED;AACA,MAAMO,WAAW,gBAAGnB,aAAa,CAAC,CAAC;;AAEnC;AACA,OAAO,MAAMoB,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAM,CAACb,KAAK,EAAEc,QAAQ,CAAC,GAAGrB,UAAU,CAACM,WAAW,EAAEQ,YAAY,CAAC;;EAE/D;EACAb,SAAS,CAAC,MAAM;IACd,MAAMY,KAAK,GAAGE,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;IAC/C,MAAMM,QAAQ,GAAGP,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;IAEjD,IAAIH,KAAK,IAAIS,QAAQ,EAAE;MACrB,IAAI;QACF,MAAMV,IAAI,GAAGW,IAAI,CAACC,KAAK,CAACF,QAAQ,CAAC;QACjCD,QAAQ,CAAC;UACPZ,IAAI,EAAE,eAAe;UACrBE,OAAO,EAAE;YAAEC,IAAI;YAAEC;UAAM;QACzB,CAAC,CAAC;MACJ,CAAC,CAAC,OAAOY,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;QACvDV,YAAY,CAACY,UAAU,CAAC,WAAW,CAAC;QACpCZ,YAAY,CAACY,UAAU,CAAC,UAAU,CAAC;QACnCN,QAAQ,CAAC;UAAEZ,IAAI,EAAE,aAAa;UAAEE,OAAO,EAAE;QAAM,CAAC,CAAC;MACnD;IACF,CAAC,MAAM;MACLU,QAAQ,CAAC;QAAEZ,IAAI,EAAE,aAAa;QAAEE,OAAO,EAAE;MAAM,CAAC,CAAC;IACnD;EACF,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMiB,KAAK,GAAG,MAAOC,WAAW,IAAK;IACnC,IAAI;MACFR,QAAQ,CAAC;QAAEZ,IAAI,EAAE,aAAa;QAAEE,OAAO,EAAE;MAAK,CAAC,CAAC;MAEhD,MAAMmB,QAAQ,GAAG,MAAM5B,OAAO,CAAC0B,KAAK,CAACC,WAAW,CAAC;MAEjD,IAAIC,QAAQ,CAACC,OAAO,EAAE;QACpB,MAAM;UAAEnB,IAAI;UAAEC;QAAM,CAAC,GAAGiB,QAAQ;;QAEhC;QACAf,YAAY,CAACiB,OAAO,CAAC,WAAW,EAAEnB,KAAK,CAAC;QACxCE,YAAY,CAACiB,OAAO,CAAC,UAAU,EAAET,IAAI,CAACU,SAAS,CAACrB,IAAI,CAAC,CAAC;QAEtDS,QAAQ,CAAC;UACPZ,IAAI,EAAE,eAAe;UACrBE,OAAO,EAAE;YAAEC,IAAI;YAAEC;UAAM;QACzB,CAAC,CAAC;QAEFV,KAAK,CAAC4B,OAAO,CAAC,iBAAiBnB,IAAI,CAACsB,SAAS,IAAItB,IAAI,CAACuB,QAAQ,GAAG,CAAC;QAClE,OAAO;UAAEJ,OAAO,EAAE;QAAK,CAAC;MAC1B,CAAC,MAAM;QACL,MAAM,IAAIK,KAAK,CAACN,QAAQ,CAACO,OAAO,IAAI,cAAc,CAAC;MACrD;IACF,CAAC,CAAC,OAAOZ,KAAK,EAAE;MAAA,IAAAa,eAAA,EAAAC,oBAAA;MACdb,OAAO,CAACD,KAAK,CAAC,cAAc,EAAEA,KAAK,CAAC;MACpCJ,QAAQ,CAAC;QAAEZ,IAAI,EAAE,aAAa;QAAEE,OAAO,EAAE;MAAM,CAAC,CAAC;MAEjD,MAAM0B,OAAO,GAAG,EAAAC,eAAA,GAAAb,KAAK,CAACK,QAAQ,cAAAQ,eAAA,wBAAAC,oBAAA,GAAdD,eAAA,CAAgBE,IAAI,cAAAD,oBAAA,uBAApBA,oBAAA,CAAsBF,OAAO,KAAIZ,KAAK,CAACY,OAAO,IAAI,cAAc;MAChFlC,KAAK,CAACsB,KAAK,CAACY,OAAO,CAAC;MAEpB,OAAO;QAAEN,OAAO,EAAE,KAAK;QAAEN,KAAK,EAAEY;MAAQ,CAAC;IAC3C;EACF,CAAC;;EAED;EACA,MAAMI,MAAM,GAAG,MAAAA,CAAA,KAAY;IACzB,IAAI;MACF;MACA,IAAIlC,KAAK,CAACM,KAAK,EAAE;QACf,MAAMX,OAAO,CAACuC,MAAM,CAAC,CAAC;MACxB;IACF,CAAC,CAAC,OAAOhB,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,mBAAmB,EAAEA,KAAK,CAAC;IAC3C,CAAC,SAAS;MACR;MACAV,YAAY,CAACY,UAAU,CAAC,WAAW,CAAC;MACpCZ,YAAY,CAACY,UAAU,CAAC,UAAU,CAAC;MAEnCN,QAAQ,CAAC;QAAEZ,IAAI,EAAE;MAAS,CAAC,CAAC;MAC5BN,KAAK,CAAC4B,OAAO,CAAC,yBAAyB,CAAC;IAC1C;EACF,CAAC;;EAED;EACA,MAAMW,cAAc,GAAG,MAAOC,SAAS,IAAK;IAC1C,IAAI;MACF,MAAMb,QAAQ,GAAG,MAAM5B,OAAO,CAACwC,cAAc,CAACC,SAAS,CAAC;MAExD,IAAIb,QAAQ,CAACC,OAAO,EAAE;QACpB5B,KAAK,CAAC4B,OAAO,CAAC,+BAA+B,CAAC;QAC9C,OAAO;UAAEA,OAAO,EAAE;QAAK,CAAC;MAC1B,CAAC,MAAM;QACL,MAAM,IAAIK,KAAK,CAACN,QAAQ,CAACO,OAAO,IAAI,wBAAwB,CAAC;MAC/D;IACF,CAAC,CAAC,OAAOZ,KAAK,EAAE;MAAA,IAAAmB,gBAAA,EAAAC,qBAAA;MACdnB,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAE9C,MAAMY,OAAO,GAAG,EAAAO,gBAAA,GAAAnB,KAAK,CAACK,QAAQ,cAAAc,gBAAA,wBAAAC,qBAAA,GAAdD,gBAAA,CAAgBJ,IAAI,cAAAK,qBAAA,uBAApBA,qBAAA,CAAsBR,OAAO,KAAIZ,KAAK,CAACY,OAAO,IAAI,wBAAwB;MAC1FlC,KAAK,CAACsB,KAAK,CAACY,OAAO,CAAC;MAEpB,OAAO;QAAEN,OAAO,EAAE,KAAK;QAAEN,KAAK,EAAEY;MAAQ,CAAC;IAC3C;EACF,CAAC;;EAED;EACA,MAAMS,UAAU,GAAIxB,QAAQ,IAAK;IAC/BD,QAAQ,CAAC;MACPZ,IAAI,EAAE,aAAa;MACnBE,OAAO,EAAEW;IACX,CAAC,CAAC;;IAEF;IACA,MAAMyB,WAAW,GAAG;MAAE,GAAGxC,KAAK,CAACK,IAAI;MAAE,GAAGU;IAAS,CAAC;IAClDP,YAAY,CAACiB,OAAO,CAAC,UAAU,EAAET,IAAI,CAACU,SAAS,CAACc,WAAW,CAAC,CAAC;EAC/D,CAAC;;EAED;EACA,MAAMC,OAAO,GAAIC,IAAI,IAAK;IAAA,IAAAC,WAAA;IACxB,OAAO,EAAAA,WAAA,GAAA3C,KAAK,CAACK,IAAI,cAAAsC,WAAA,uBAAVA,WAAA,CAAYD,IAAI,MAAKA,IAAI;EAClC,CAAC;;EAED;EACA,MAAME,UAAU,GAAIC,KAAK,IAAK;IAAA,IAAAC,YAAA;IAC5B,OAAOD,KAAK,CAACE,QAAQ,EAAAD,YAAA,GAAC9C,KAAK,CAACK,IAAI,cAAAyC,YAAA,uBAAVA,YAAA,CAAYJ,IAAI,CAAC;EACzC,CAAC;EAED,MAAMM,KAAK,GAAG;IACZ,GAAGhD,KAAK;IACRqB,KAAK;IACLa,MAAM;IACNC,cAAc;IACdI,UAAU;IACVE,OAAO;IACPG;EACF,CAAC;EAED,oBACE9C,OAAA,CAACY,WAAW,CAACuC,QAAQ;IAACD,KAAK,EAAEA,KAAM;IAAApC,QAAA,EAChCA;EAAQ;IAAAsC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;;AAED;AAAAxC,EAAA,CA5IaF,YAAY;AAAA2C,EAAA,GAAZ3C,YAAY;AA6IzB,OAAO,MAAM4C,OAAO,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAC3B,MAAMC,OAAO,GAAGjE,UAAU,CAACkB,WAAW,CAAC;EAEvC,IAAI,CAAC+C,OAAO,EAAE;IACZ,MAAM,IAAI5B,KAAK,CAAC,6CAA6C,CAAC;EAChE;EAEA,OAAO4B,OAAO;AAChB,CAAC;AAACD,GAAA,CARWD,OAAO;AAAA,IAAAD,EAAA;AAAAI,YAAA,CAAAJ,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}